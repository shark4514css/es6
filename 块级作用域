1， var生命及变量提升机制
    在函数作用域或全局作用域中通过关键字var生命的变量，无论实际上是哪里声明的，都会被当成在当前作用域顶部声明的变量，这就是变量提升
2， 块级声明
    块级声明用于声明在指定块的作用域之外无法访问的变量。
    块级作用域存在于函数内部、块中（字符大括号之间的区域）
    let声明不会提升，离开块后立即销毁
3， 禁止重声明
    作用域中已经存在某个标识符，再使用let声明就会抛出错误
4， const
    const不可以修改绑定，但是允许修改值
    这就意味着声明对象之后，可以修改该对象的属性值
5， 临时死区
    let和const没有变量提升效果
6， const用在for-in for-of中使用和let表现一致，不会报错，是因为每次迭代不会修改已有绑定，而是创建一个新绑定。
    let声明在循环内部的行为是标准中专门定义的，不一定与let的不提升特性相关。事实上早期的let实现不包括这一行为，是后期加进去的
7， 全局块作用域绑定
    当var被用于全局作用域时，它会创建一个新的全局变量作为全局对象（浏览器中的window对象）的属性，意味着var很可能会无意中覆盖全局属性
    let和const就不会，只会遮蔽全局属性，这样安全的多
    如果希望在全局对象下定义变量，仍可以使用var，常用语夸iframe或者夸window访问代码
8， 块级绑定最佳实践的进化
    一开始大家用let替换var，仅在不需要改变值的时候使用const，现在尽量使用const，仅在需要改变的时候使用var
